definitions:
  models.CityGetAllResponseItem:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.CommentCreateRequest:
    properties:
      content:
        type: string
      parentID:
        type: string
      postID:
        type: string
    required:
    - content
    - postID
    type: object
  models.CommentCreateResponse:
    properties:
      content:
        type: string
      id:
        type: string
      parentID:
        type: string
      postID:
        type: string
      userID:
        type: string
    type: object
  models.CommentGetListByPostIDResponseItem:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      parentID:
        type: string
      postID:
        type: string
      subComments:
        items:
          $ref: '#/definitions/models.CommentGetListByPostIDResponseItem'
        type: array
      updatedAt:
        type: string
      userID:
        type: string
      userName:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Pagination:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  models.PaginationResponse-models_PostGetPostsByAuthorIDResponseItem:
    properties:
      data:
        items:
          $ref: '#/definitions/models.PostGetPostsByAuthorIDResponseItem'
        type: array
      pagination:
        $ref: '#/definitions/models.Pagination'
      totalCount:
        type: integer
    type: object
  models.PostCreateRequest:
    properties:
      content:
        type: string
      imageURL:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - content
    - tags
    type: object
  models.PostCreateResponse:
    properties:
      authorID:
        type: string
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      imageURL:
        type: string
      tagIDs:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    type: object
  models.PostGetPostsByAuthorIDResponseItem:
    properties:
      authorID:
        type: string
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      imageURL:
        type: string
      likedCount:
        type: integer
      tags:
        items:
          $ref: '#/definitions/models.PostGetPostsByAuthorIDResponseItemTag'
        type: array
      updatedAt:
        type: string
    type: object
  models.PostGetPostsByAuthorIDResponseItemTag:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserLoginResponse:
    properties:
      accessToken:
        type: string
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  models.UserRegisterRequest:
    properties:
      address:
        $ref: '#/definitions/models.UserRegisterRequestAddress'
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserRegisterRequestAddress:
    properties:
      cityID:
        type: string
      street:
        type: string
    required:
    - cityID
    - street
    type: object
  models.UserRegisterResponse:
    properties:
      address:
        $ref: '#/definitions/models.UserRegisterResponseAddress'
      age:
        type: integer
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  models.UserRegisterResponseAddress:
    properties:
      cityID:
        type: string
      street:
        type: string
    type: object
info:
  contact: {}
  description: Social APP API
  title: Social APP API
  version: "1.0"
paths:
  /api/city/all:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CityGetAllResponseItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all cities
      tags:
      - City
  /api/comment:
    post:
      consumes:
      - application/json
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.CommentCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommentCreateResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Post or parent comment not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - AccessToken: []
      summary: Create a new comment
      tags:
      - Comment
  /api/comment/list/post/{postID}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CommentGetListByPostIDResponseItem'
            type: array
        "400":
          description: Invalid post ID format
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get comments by post ID
      tags:
      - Comment
  /api/post:
    post:
      consumes:
      - application/json
      parameters:
      - description: Post create request
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.PostCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - AccessToken: []
      summary: Create a post
      tags:
      - Post
  /api/post/author/{authorID}/offset/{offset}/limit/{limit}:
    get:
      consumes:
      - text/plain
      parameters:
      - description: Author ID
        in: path
        name: authorID
        required: true
        type: string
      - description: Offset
        in: path
        name: offset
        required: true
        type: string
      - description: Limit
        in: path
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginationResponse-models_PostGetPostsByAuthorIDResponseItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get posts by author ID
      tags:
      - Post
  /api/user/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - User
  /api/user/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - User
securityDefinitions:
  AccessToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
